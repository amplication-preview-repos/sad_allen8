/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuizAttempt as PrismaQuizAttempt,
  Quiz as PrismaQuiz,
  User as PrismaUser,
} from "@prisma/client";

export class QuizAttemptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuizAttemptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.quizAttempt.count(args);
  }

  async quizAttempts(
    args: Prisma.QuizAttemptFindManyArgs
  ): Promise<PrismaQuizAttempt[]> {
    return this.prisma.quizAttempt.findMany(args);
  }
  async quizAttempt(
    args: Prisma.QuizAttemptFindUniqueArgs
  ): Promise<PrismaQuizAttempt | null> {
    return this.prisma.quizAttempt.findUnique(args);
  }
  async createQuizAttempt(
    args: Prisma.QuizAttemptCreateArgs
  ): Promise<PrismaQuizAttempt> {
    return this.prisma.quizAttempt.create(args);
  }
  async updateQuizAttempt(
    args: Prisma.QuizAttemptUpdateArgs
  ): Promise<PrismaQuizAttempt> {
    return this.prisma.quizAttempt.update(args);
  }
  async deleteQuizAttempt(
    args: Prisma.QuizAttemptDeleteArgs
  ): Promise<PrismaQuizAttempt> {
    return this.prisma.quizAttempt.delete(args);
  }

  async getQuiz(parentId: string): Promise<PrismaQuiz | null> {
    return this.prisma.quizAttempt
      .findUnique({
        where: { id: parentId },
      })
      .quiz();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.quizAttempt
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
