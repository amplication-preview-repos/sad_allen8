/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QuizAttempt } from "./QuizAttempt";
import { QuizAttemptCountArgs } from "./QuizAttemptCountArgs";
import { QuizAttemptFindManyArgs } from "./QuizAttemptFindManyArgs";
import { QuizAttemptFindUniqueArgs } from "./QuizAttemptFindUniqueArgs";
import { CreateQuizAttemptArgs } from "./CreateQuizAttemptArgs";
import { UpdateQuizAttemptArgs } from "./UpdateQuizAttemptArgs";
import { DeleteQuizAttemptArgs } from "./DeleteQuizAttemptArgs";
import { Quiz } from "../../quiz/base/Quiz";
import { User } from "../../user/base/User";
import { QuizAttemptService } from "../quizAttempt.service";
@graphql.Resolver(() => QuizAttempt)
export class QuizAttemptResolverBase {
  constructor(protected readonly service: QuizAttemptService) {}

  async _quizAttemptsMeta(
    @graphql.Args() args: QuizAttemptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QuizAttempt])
  async quizAttempts(
    @graphql.Args() args: QuizAttemptFindManyArgs
  ): Promise<QuizAttempt[]> {
    return this.service.quizAttempts(args);
  }

  @graphql.Query(() => QuizAttempt, { nullable: true })
  async quizAttempt(
    @graphql.Args() args: QuizAttemptFindUniqueArgs
  ): Promise<QuizAttempt | null> {
    const result = await this.service.quizAttempt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuizAttempt)
  async createQuizAttempt(
    @graphql.Args() args: CreateQuizAttemptArgs
  ): Promise<QuizAttempt> {
    return await this.service.createQuizAttempt({
      ...args,
      data: {
        ...args.data,

        quiz: args.data.quiz
          ? {
              connect: args.data.quiz,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QuizAttempt)
  async updateQuizAttempt(
    @graphql.Args() args: UpdateQuizAttemptArgs
  ): Promise<QuizAttempt | null> {
    try {
      return await this.service.updateQuizAttempt({
        ...args,
        data: {
          ...args.data,

          quiz: args.data.quiz
            ? {
                connect: args.data.quiz,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuizAttempt)
  async deleteQuizAttempt(
    @graphql.Args() args: DeleteQuizAttemptArgs
  ): Promise<QuizAttempt | null> {
    try {
      return await this.service.deleteQuizAttempt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Quiz, {
    nullable: true,
    name: "quiz",
  })
  async getQuiz(@graphql.Parent() parent: QuizAttempt): Promise<Quiz | null> {
    const result = await this.service.getQuiz(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: QuizAttempt): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
