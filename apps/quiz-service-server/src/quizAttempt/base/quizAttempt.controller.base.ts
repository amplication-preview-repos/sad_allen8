/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuizAttemptService } from "../quizAttempt.service";
import { QuizAttemptCreateInput } from "./QuizAttemptCreateInput";
import { QuizAttempt } from "./QuizAttempt";
import { QuizAttemptFindManyArgs } from "./QuizAttemptFindManyArgs";
import { QuizAttemptWhereUniqueInput } from "./QuizAttemptWhereUniqueInput";
import { QuizAttemptUpdateInput } from "./QuizAttemptUpdateInput";

export class QuizAttemptControllerBase {
  constructor(protected readonly service: QuizAttemptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuizAttempt })
  async createQuizAttempt(
    @common.Body() data: QuizAttemptCreateInput
  ): Promise<QuizAttempt> {
    return await this.service.createQuizAttempt({
      data: {
        ...data,

        quiz: data.quiz
          ? {
              connect: data.quiz,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        answers: true,
        createdAt: true,
        id: true,

        quiz: {
          select: {
            id: true,
          },
        },

        score: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuizAttempt] })
  @ApiNestedQuery(QuizAttemptFindManyArgs)
  async quizAttempts(@common.Req() request: Request): Promise<QuizAttempt[]> {
    const args = plainToClass(QuizAttemptFindManyArgs, request.query);
    return this.service.quizAttempts({
      ...args,
      select: {
        answers: true,
        createdAt: true,
        id: true,

        quiz: {
          select: {
            id: true,
          },
        },

        score: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuizAttempt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quizAttempt(
    @common.Param() params: QuizAttemptWhereUniqueInput
  ): Promise<QuizAttempt | null> {
    const result = await this.service.quizAttempt({
      where: params,
      select: {
        answers: true,
        createdAt: true,
        id: true,

        quiz: {
          select: {
            id: true,
          },
        },

        score: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuizAttempt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuizAttempt(
    @common.Param() params: QuizAttemptWhereUniqueInput,
    @common.Body() data: QuizAttemptUpdateInput
  ): Promise<QuizAttempt | null> {
    try {
      return await this.service.updateQuizAttempt({
        where: params,
        data: {
          ...data,

          quiz: data.quiz
            ? {
                connect: data.quiz,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          answers: true,
          createdAt: true,
          id: true,

          quiz: {
            select: {
              id: true,
            },
          },

          score: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuizAttempt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuizAttempt(
    @common.Param() params: QuizAttemptWhereUniqueInput
  ): Promise<QuizAttempt | null> {
    try {
      return await this.service.deleteQuizAttempt({
        where: params,
        select: {
          answers: true,
          createdAt: true,
          id: true,

          quiz: {
            select: {
              id: true,
            },
          },

          score: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
